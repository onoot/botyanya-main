import db from '../models/index.mjs';
import {Op} from 'sequelize'
import { deleteMessage } from '../utils/botUtils.mjs';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ
 */
export const handleAddIngredientToMenu = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;

  try {
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
    if (!state || !state.currentMenuId) {
      return bot.sendMessage(chatId, "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –º–µ–Ω—é.");
    }

    const ingredients = await db.Ingredient.findAll({ raw: true });

    const keyboard = ingredients.map(ingredient => [{
      text: `${ingredient.name} (${ingredient.category})`,
      callback_data: `select_ingredient_for_menu_${state.currentMenuId}_${ingredient.id}`
    }]);

    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'user_edit_ingredients' }]);

    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í editMessageText
    await bot.editMessageText(
      "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:",
      chatId,
      message_id,
      { reply_markup: { inline_keyboard: keyboard } }
    );

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:", err);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.");
  }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –º–µ–Ω—é
export const userMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', callback_data :'user_add_ingredient' }],
      [{ text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data :'user_edit_ingredients' }],
      [{ text: 'üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data :'user_confirm_order' }],
      [{ text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–±–ª–æ–Ω–∞–º', callback_data :'select_template' }]
    ]
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
export const handleMakeOrder = async (bot, query) => {
  const chatId = query.message.chat.id;

  try {
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });

    if (!state || !state.currentMenuId) {
      return bot.sendMessage(chatId, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞");
    }

    const order = await db.Order.create({
      userId: state.userId,
      menuId: state.currentMenuId,
      submittedAt: new Date()
    });

    await bot.sendMessage(chatId, `üì¶ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${order.id} —Å–æ—Ö—Ä–∞–Ω–Ω–µ–Ω.`);
    await showTemplateMenu(bot, chatId);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑");
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const handleSelectIngredientForEdit = async (bot, query) => {
  const chatId = query.message.chat.id;
  const match = query.data.match(/edit_ingredient_(\d+)/);

  if (!match) {
    return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞", true);
  }

  const ingredientId = parseInt(match[1], 10);

  try {
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
    await state.update({ editingIngredientId: ingredientId });
    await deleteMessage(bot, chatId, message_id);
    await bot.sendMessage(chatId, "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.");
  }
};

export const handleEditIngredients = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;

  try {
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });

    const items = await db.MenuItem.findAll({
      where: { menuId: state.currentMenuId },
      raw: true
    });

    const ingredientIds = items.map(i => i.ingredientId);
    const ingredients = await db.Ingredient.findAll({
      where: { id: ingredientIds },
      raw: true
    });

    const keyboard = items.map(item => {
      const ing = ingredients.find(i => i.id === item.ingredientId);
      return [{
        text: `${ing?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'} ‚Äî ${item.requiredAmount || 0} ${ing?.unit || ''}`,
        callback_data: `edit_ingredient_${item.ingredientId}`
      }];
    });

    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í editMessageText
    await bot.editMessageText(
      "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
      chatId,
      message_id,
      { reply_markup: { inline_keyboard: keyboard } }
    );

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:", err);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.");
  }
};

export const showTemplateMenu = async (bot, chatId) => {
  try {
    const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });

    const templates = await db.Menu.findAll({
      where: {
        isTemplate: true,
        [Op.or]: [
          { ownerId: null },
          { ownerId: user.id }
        ]
      },
      raw: true
    });

    if (!templates.length) {
      return bot.sendMessage(
        chatId,
        "üçΩ –®–∞–±–ª–æ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_template_menu –∏–º—è_—à–∞–±–ª–æ–Ω–∞"
      );
    }

    const keyboard = templates.map(template => [{
      text: template.name || `–®–∞–±–ª–æ–Ω #${template.id}`,
      callback_data:`use_template_${template.id}`
    }]);

    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤:", err);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤.");
  }
};

export const createTemplateMenu = async (bot, msg) => {
  const chatId = msg.chat.id;
  const args = msg.text.split(' ');

  if (args.length < 2) {
    return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ: /add_template_menu –∏–º—è_—à–∞–±–ª–æ–Ω–∞");
  }

  const name = args[1];

  try {
    const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
    if (!user) {
      return bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const menu = await db.Menu.create({
      name,
      isTemplate: true,
      ownerId: user.id
    });

    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
    if (!state) {
      return bot.sendMessage(chatId, "‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    }

    await state.update({ currentMenuId: menu.id });

    await bot.sendMessage(chatId, `‚úÖ –®–∞–±–ª–æ–Ω "${name}" —Å–æ–∑–¥–∞–Ω.`);
    await bot.sendMessage(chatId, "üõí –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω.", userMenuKeyboard);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω.");
  }
};

export const addIngredientToMenu = async (bot, query) => {
  const chatId = query.message.chat.id;
  const match = query.data.match(/add_ingredient_to_menu_(\d+)_(\d+)/);

  if (!match) {
    return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", true);
  }

  const menuId = parseInt(match[1], 10);
  const ingredientId = parseInt(match[2], 10);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
  await state.update({
    currentMenuId: menuId,
    editingIngredientId: ingredientId
  });

  await bot.editMessageText(
    "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:",
    chatId,
    query.message.message_id
  );
};
export const handleSelectIngredientForMenu = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;
  const match = query.data.match(/select_ingredient_for_menu_(\d+)_(\d+)/);

  if (!match) {
    return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", true);
  }

  const menuId = parseInt(match[1], 10);
  const ingredientId = parseInt(match[2], 10);

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
    await state.update({
      currentMenuId: menuId,
      editingIngredientId: ingredientId
    });

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.deleteMessage(chatId, message_id).catch(() => {});

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await bot.sendMessage(chatId, "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:");

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.");
  }
};

export const handleIngredientQuantityInput = async (bot, msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  try {
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });

    if (!state || !state.editingIngredientId || !state.currentMenuId) {
      return bot.sendMessage(chatId, "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏–ª–∏ –º–µ–Ω—é.");
    }

    const amount = parseFloat(text);
    if (isNaN(amount)) {
      return bot.sendMessage(chatId, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
    }

    const ingredientId = state.editingIngredientId;

    await db.MenuItem.upsert({
      menuId: state.currentMenuId,
      ingredientId,
      requiredAmount: amount
    });

    await state.update({ editingIngredientId: null });

    const ingredient = await db.Ingredient.findByPk(ingredientId, { raw: true });

    await bot.sendMessage(chatId, `‚úÖ "${ingredient.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω—é ‚Äî ${amount} ${ingredient.unit}`);
    await bot.sendMessage(chatId, "üõí –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", userMenuKeyboard);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
  }
};

export const showCategories = async (bot, chatId) => {
  try {
    const categories = await db.Ingredient.findAll({
      attributes: ['category'],
      group: ['category']
    });

    const keyboard = categories.map(cat => [{
      text: cat.category,
      callback_data:`select_category_${cat.category}`
    }]);

    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data:'select_template' }]);

    await bot.sendMessage(chatId, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", err);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.");
  }
};

export const selectCategory = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;
  const match = query.data.match(/select_category_(.+)/);

  if (!match) {
    return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true);
  }

  const category = decodeURIComponent(match[1]);

  try {
    const ingredients = await db.Ingredient.findAll({ where: { category }, raw: true });

    if (!ingredients.length) {
      return bot.sendMessage(chatId, "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.");
    }

    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });

    if (!state || !state.currentMenuId) {
      return bot.sendMessage(chatId, "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –º–µ–Ω—é.");
    }

    const keyboard = ingredients.map(ingredient => [{
      text: `${ingredient.name} ‚Äî ${ingredient.unit}`,
      callback_data:`select_ingredient_for_menu_${state.currentMenuId}_${ingredient.id}`
    }]);

    // ‚ùå –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.deleteMessage(chatId, message_id).catch(() => {});

    // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.sendMessage(chatId, `üîç –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}":`, {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.");
  }
};

export const handleUseTemplate = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;
  const match = query.data.match(/use_template_(\d+)/);

  if (!match) {
    return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞", true);
  }

  const templateId = parseInt(match[1], 10);

  try {
    const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });

    if (!user) {
      return bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const template = await db.Menu.findByPk(templateId);

    if (!template) {
      return bot.sendMessage(chatId, "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    let menuId;

    // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —á—É–∂–æ–π ‚Äî —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é
    if (!template.ownerId || template.ownerId !== user.id) {
      const newMenu = await db.Menu.create({
        name: `${template.name} (–≤–∞—à–∞ –∫–æ–ø–∏—è)`,
        isTemplate: false,
        owner_id: user.id // ‚úÖ –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –µ—Å—Ç—å id
      });

      const originalItems = await db.MenuItem.findAll({ where: { menuId: template.id }, raw: true });

      const copiedItems = originalItems.map(item => ({
        menuId: newMenu.id,
        ingredientId: item.ingredientId,
        requiredAmount: item.requiredAmount
      }));

      await db.MenuItem.bulkCreate(copiedItems);
      menuId = newMenu.id;
    } else {
      menuId = template.id;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const [state] = await db.UserState.findOrCreate({
      where: { telegramId: chatId.toString() },
      defaults: {
        telegramId: chatId.toString(),
        currentMenuId: menuId
      }
    });

    if (!state.currentMenuId || state.currentMenuId !== menuId) {
      await state.update({ currentMenuId: menuId });
    }

    const items = await db.MenuItem.findAll({ where: { menuId }, raw: true });
    const ingredientIds = items.map(i => i.ingredientId);
    const ingredients = await db.Ingredient.findAll({ where: { id: ingredientIds }, raw: true });

    const message = `üõí –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —à–∞–±–ª–æ–Ω–∞ "${template.name}":\n\n` +
      items.map(item => {
        const ing = ingredients.find(i => i.id === item.ingredientId);
        return `${ing?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'} ‚Äî ${item.requiredAmount || 0} ${ing?.unit || ''}`;
      }).join('\n');

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.deleteMessage(chatId, message_id).catch(() => {});

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.sendMessage(chatId, message, userMenuKeyboard);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω.");
  }
};