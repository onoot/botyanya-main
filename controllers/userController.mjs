// controllers/userController.mjs
import db from '../models/index.mjs';

export const showCategoriesMenu = async (bot, chatId) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    const categories = await db.Ingredient.findAll({
      attributes: [
        [db.sequelize.fn('DISTINCT', db.sequelize.col('category')), 'category']
      ],
      raw: true
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!categories || categories.length === 0) {
      return bot.sendMessage(chatId, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.");
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = categories.map(category => [{
      text: category.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      callback_data: `category_${category.category || 'main_menu'}`
    }]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.");
  }
};

export const showIngredientsInCategory = async (bot, chatId, category) => {
  try {
    const ingredients = await db.Ingredient.findAll({ 
      where: { category }, 
      raw: true 
    });

    if (!ingredients.length) {
      return bot.sendMessage(chatId, "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.");
    }

    const keyboard = ingredients.map(ingredient => [{
      text: `${ingredient.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (${ingredient.packaging_amount || 1} ${ingredient.unit || '–µ–¥'})`,
      callback_data: `ingredient_${ingredient.id}`
    }]);

    keyboard.push(
      [{ text: 'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', callback_data: 'enter_comment' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'make_order' }]
    );

    await bot.sendMessage(chatId, `–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}":`, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.");
  }
};

export const showIngredientQuantityOptions = async (bot, chatId, ingredientId) => {
  try {
    const ingredient = await db.Ingredient.findByPk(ingredientId, { raw: true });

    if (!ingredient) {
      return bot.sendMessage(chatId, "‚ùå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const options = [];
    const min_order = ingredient.min_order || 1;
    const max_order = ingredient.max_order || 100;
    const packaging_amount = ingredient.packaging_amount || 1;

    let amount = min_order;
    while (amount <= max_order) {
      options.push(amount);
      amount += packaging_amount;
    }

    const keyboard = [
      options.map(amount => ({
        text: amount.toString(),
        callback_data: `quantity_${ingredientId}_${amount}`
      }))
    ];

    keyboard.push([
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `category_${ingredient.category || 'main_menu'}` }
    ]);

    await bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è "${ingredient.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}" (–º–∞–∫—Å. ${max_order} ${ingredient.unit || '–µ–¥'}):`, { 
      reply_markup: { inline_keyboard: keyboard } 
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.");
  }
};

export const handleQuantitySelection = async (bot, chatId, ingredientId, amount) => {
  try {
    const [state] = await db.UserState.findOrCreate({
      where: { telegramId: chatId.toString() },
      defaults: {
        telegramId: chatId.toString(),
        currentOrder: {}, // ‚úÖ –æ–±—ä–µ–∫—Ç
        comment: null,
        step: null
      }
    });

    if (!state) {
      return bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    const ingredient = await db.Ingredient.findByPk(ingredientId);
    if (!ingredient) {
      return bot.sendMessage(chatId, "‚ùå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    // ‚úÖ –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
    const currentOrder = state.currentOrder || {};

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
    currentOrder[ingredientId] = parseFloat(amount);

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    await state.update({ currentOrder });

    // ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    const keyboard = [
      [
        { text: 'üë©‚Äçüç≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'submit_order' },
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `category_${ingredient.category || 'main_menu'}` }
      ]
    ];

    await bot.sendMessage(chatId, `‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${ingredient.name} ‚Äî ${amount} ${ingredient.unit}`, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
  }
};

export const enterCommentMode = async (bot, chatId) => {
  try {
    // –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const [state] = await db.UserState.findOrCreate({
      where: { telegramId: chatId.toString() },
      defaults: {
        telegramId: chatId.toString(),
        currentOrder: JSON.stringify({}),
        comment: null,
        step: null
      }
    });

    if (!state) {
      return bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    await state.update({ step: 'entering_comment' });
    await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:");
    
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.");
  }
};

export const submitOrder = async (bot, chatId) => {
  try {
    const [state] = await db.UserState.findOrCreate({
      where: { telegramId: chatId.toString() },
      defaults: {
        telegramId: chatId.toString(),
        currentOrder: {},
        comment: null,
        step: null
      }
    });

    if (!state) {
      return bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
    if (!user) {
      return bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const order = state.currentOrder || {};
    if (Object.keys(order).length === 0) {
      return bot.sendMessage(chatId, "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç–æ–π.");
    }

    // ‚úÖ 1. –°–æ–∑–¥–∞—ë–º —Å–∞–º –∑–∞–∫–∞–∑ (Menu)
    const newOrder = await db.Menu.create({
      name: `–ó–∞–∫–∞–∑ –æ—Ç ${new Date().toLocaleDateString()}`,
      comment: state.comment || null,
      is_template: false,
      owner_id: user.id
    });

    // ‚úÖ 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ (MenuItem)
    const menuItems = Object.entries(order).map(([ingredientId, quantity]) => ({
      menu_id: newOrder.id,
      ingredient_id: parseInt(ingredientId),
      required_amount: parseFloat(quantity)
    }));

    // ‚úÖ 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
    await db.MenuItem.bulkCreate(menuItems);

    // ‚úÖ 4. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update({
      currentMenuId: newOrder.id,
      currentOrder: {}, // –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      comment: null,
      step: null
    });

    // ‚úÖ 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    const ingredientIds = Object.keys(order).map(id => parseInt(id));
    const ingredients = await db.Ingredient.findAll({
      where: { id: ingredientIds },
      raw: true
    });

    let orderText = `üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${user.username ? `@${user.username}` : user.telegramId} (ID: ${newOrder.id}):\n\n`;
    for (const [ingredientId, quantity] of Object.entries(order)) {
      const ingredient = ingredients.find(ing => ing.id === parseInt(ingredientId));
      if (ingredient) {
        orderText += `‚Ä¢ ${ingredient.name} ‚Äî ${quantity} ${ingredient.unit}\n`;
      }
    }

    if (state.comment) {
      orderText += `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${state.comment}`;
    }

    // ‚úÖ 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
    const admins = await db.User.findAll({ where: { role: 'admin' } });
    for (const admin of admins) {
      try {
        await bot.sendMessage(admin.telegramId, orderText);
      } catch (err) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É ${admin.telegramId}:`, err.message);
      }
    }

    // ‚úÖ 7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const keyboard = {
      reply_markup: {
        inline_keyboard: [[{ text: 'üç± –ì–ª–∞–≤–Ω–∞—è', callback_data: 'main_menu' }]]
      }
    };
    await bot.sendMessage(chatId, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", keyboard);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.");
  }
};