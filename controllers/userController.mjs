// controllers/userController.mjs
import db from '../models/index.mjs';
import {sendOrEditMessage} from '../utils/botUtils.mjs'

export const showCategoriesMenu = async (bot, chatId) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    const categories = await db.Ingredient.findAll({
      attributes: [
        [db.sequelize.fn('DISTINCT', db.sequelize.col('category')), 'category']
      ],
      raw: true
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!categories || categories.length === 0) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.");
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = categories.map(category => [{
      text: category.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      callback_data: `category_${category.category || 'main_menu'}`
    }]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

    await sendOrEditMessage(bot, chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.");
  }
};

export const showIngredientsInCategory = async (bot, chatId, category) => {
  try {
    const ingredients = await db.Ingredient.findAll({ 
      where: { category }, 
      raw: true 
    });

    if (!ingredients.length) {
      return sendOrEditMessage(bot, chatId, "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.");
    }

    const keyboard = ingredients.map(ingredient => [{
      text: `${ingredient.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (${ingredient.packaging_amount || 1} ${ingredient.unit || '–µ–¥'})`,
      callback_data: `ingredient_${ingredient.id}`
    }]);

    keyboard.push(
      [{ text: 'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', callback_data: 'enter_comment' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'make_order' }]
    );

    await sendOrEditMessage(bot, chatId, `–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}":`, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.");
  }
};

export const showIngredientQuantityOptions = async (bot, chatId, ingredientId) => {
  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.User.findOne({ 
      where: { telegramId: chatId.toString() } 
    });
    if (!user) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
    
    // 2. –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ telegramId
    let state = await db.UserState.findOne({ 
      where: { telegramId: chatId.toString() } 
    });

    // 3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ userId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    if (state && !state.userId) {
      await state.update({ userId: user.id });
    }
    // 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º
    else if (!state) {
      state = await db.UserState.create({
        telegramId: chatId.toString(),
        userId: user.id,
        currentOrder: {},
        comment: null,
        step: null
      });
    }
    
    if (!state) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }
    
    const ingredient = await db.Ingredient.findByPk(ingredientId, { raw: true });
    if (!ingredient) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
    
    const options = [];
    const min_order = ingredient.min_order || 1;
    const max_order = ingredient.max_order || 100;
    const packaging_amount = ingredient.packaging_amount || 1;
    
    let amount = min_order;
    while (amount <= max_order) {
      options.push(amount);
      amount += packaging_amount;
    }
    
    const keyboard = [
      // –ö–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
      options.map(amount => ({
        text: amount.toString(),
        callback_data: `quantity_${ingredientId}_${amount}`
      }))
    ];
    
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    keyboard.push([
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `category_${ingredient.category || 'main_menu'}` }
    ]);
    
    await sendOrEditMessage(bot, chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è "${ingredient.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}" (–º–∞–∫—Å. ${max_order} ${ingredient.unit || '–µ–¥'}):`, { 
      reply_markup: { inline_keyboard: keyboard } 
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.");
  }
};

export const enterCommentMode = async (bot, chatId) => {
  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.User.findOne({ 
      where: { telegramId: chatId.toString() } 
    });
    
    if (!user) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    // 2. –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ telegramId
    let state = await db.UserState.findOne({ 
      where: { telegramId: chatId.toString() } 
    });

    // 3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ userId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    if (state && !state.userId) {
      await state.update({ userId: user.id });
    }
    // 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º
    else if (!state) {
      state = await db.UserState.create({
        telegramId: chatId.toString(),
        userId: user.id,
        currentOrder: {},
        comment: null,
        step: null
      });
    }

    if (!state) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update({ step: 'entering_comment' });

    const keyboard = [[{ text: '‚ùå–û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }]];

    await sendOrEditMessage(bot, chatId, "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:", {
      reply_markup: { inline_keyboard: keyboard }
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.");
  }
};

/**
 * –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
export const editCommentMode = async (bot, chatId) => {
  try {
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
    if (!state) {
      return sendOrEditMessage(bot, chatId, "‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update({ step: 'editing_comment' });

    const keyboard = [
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }]
    ];

    await sendOrEditMessage(bot, chatId, `‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Å—Ç–∞—Ä—ã–π: "${state.comment || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")`, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
  }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
export const deleteComment = async (bot, chatId) => {
  try {
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
    if (!state) {
      return sendOrEditMessage(bot, chatId, "‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    }

    await state.update({ comment: null });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    const order = state.currentOrder || {};
    const ingredientIds = Object.keys(order).map(id => parseInt(id));

    const ingredients = await db.Ingredient.findAll({
      where: { id: ingredientIds },
      raw: true
    });

    let message = "‚úÖ –í—ã–±—Ä–∞–Ω–æ:\n";
    
    for (const [id, qty] of Object.entries(order)) {
      const ing = ingredients.find(i => i.id === parseInt(id));
      if (ing) {
        message += `‚Ä¢ ${ing.name} ‚Äî ${qty} ${ing.unit}\n`;
      } else {
        message += `‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç (ID: ${id}) ‚Äî ${qty} –µ–¥\n`;
      }
    }

    message += "\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª—ë–Ω.";

    const keyboard = [
      [
        { text: 'üë©‚Äçüç≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'submit_order' }
      ],
      [
        { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', callback_data: 'make_order' },
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
      ],
      [
        { text: 'üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'enter_comment' }
      ],
    ];

    await sendOrEditMessage(bot, chatId, message, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.");
  }
};

export const handleQuantitySelection = async (bot, chatId, ingredientId, amount) => {
  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.User.findOne({ 
      where: { telegramId: chatId.toString() } 
    });
    
    if (!user) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    // 2. –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ telegramId
    let state = await db.UserState.findOne({ 
      where: { telegramId: chatId.toString() } 
    });

    // 3. –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ userId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    if (state && !state.userId) {
      await state.update({ userId: user.id });
    }
    // 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
    else if (!state) {
      state = await db.UserState.create({
        telegramId: chatId.toString(),
        userId: user.id,
        currentOrder: {},
        comment: null,
        step: null
      });
    }

    if (!state) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    const ingredient = await db.Ingredient.findByPk(ingredientId);
    if (!ingredient) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    // 5. –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
    const currentOrder = JSON.parse(JSON.stringify(state.currentOrder || {}));

    // 6. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
    currentOrder[ingredientId] = parseFloat(amount);

    // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º
    await state.update({ currentOrder });

    // 8. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const freshState = await db.UserState.findOne({ 
      where: { telegramId: chatId.toString() } 
    });

    // ‚úÖ 9. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    const order = freshState.currentOrder || {};
    const ingredientIds = Object.keys(order).map(id => parseInt(id));

    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –ë–î
    const ingredients = await db.Ingredient.findAll({
      where: { id: ingredientIds },
      raw: true
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = "‚úÖ –í—ã–±—Ä–∞–Ω–æ:\n";
    
    for (const [id, qty] of Object.entries(order)) {
      const ing = ingredients.find(i => i.id === parseInt(id));
      if (ing) {
        message += `‚Ä¢ ${ing.name} ‚Äî ${qty} ${ing.unit}\n`;
      } else {
        message += `‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç (ID: ${id}) ‚Äî ${qty} –µ–¥\n`;
      }
    }
     if (freshState?.dataValues?.comment) {
      message += `\nüí¨ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${freshState.comment}`;
    }
    // ‚úÖ 10. –ö–Ω–æ–ø–∫–∏: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", "–ù–∞–∑–∞–¥"
    const keyboard = [
      [
        { text: 'üë©‚Äçüç≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'submit_order' }
      ],
      [
        { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', callback_data: 'make_order' },
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
      ],
      [
        { text: 'üí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', callback_data: 'enter_comment' }
      ],
    ];

    // ‚úÖ 11. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    await sendOrEditMessage(bot, chatId, message, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
  }
};

export const submitOrder = async (bot, chatId) => {
  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.User.findOne({ 
      where: { telegramId: chatId.toString() } 
    });
    
    if (!user) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    // 2. –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ telegramId
    let state = await db.UserState.findOne({ 
      where: { telegramId: chatId.toString() } 
    });

    // 3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ userId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    if (state && !state.userId) {
      await state.update({ userId: user.id });
    }
    // 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º
    else if (!state) {
      state = await db.UserState.create({
        telegramId: chatId.toString(),
        userId: user.id,
        currentOrder: {},
        comment: null,
        step: null
      });
    }

    if (!state) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    // 5. –ü–û–õ–ù–û–°–¢–¨–Æ –ö–û–ü–ò–†–£–ï–ú —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
    const currentOrder = JSON.parse(JSON.stringify(state.currentOrder || {}));
    
    if (Object.keys(currentOrder).length === 0) {
      return sendOrEditMessage(bot, chatId, "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç–æ–π.");
    }

    // ‚úÖ 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ MenuItem
    const items = [];
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç currentOrder –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { id, quantity }
    for (const [ingredientId, quantity] of Object.entries(currentOrder)) {
      const id = Number(ingredientId);
      if (!isNaN(id) && id > 0) {
        items.push({
          id: id,
          quantity: parseFloat(quantity)
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (items.length === 0) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑: –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.");
    }
    
    // ‚úÖ 2. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å MenuItem
    const menuItem = await db.MenuItem.create({
      ingredientId: items
    });
    
    if (!menuItem || !menuItem.id) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é");
    }
    
    // ‚úÖ 3. –°–æ–∑–¥–∞–µ–º —Å–∞–º –∑–∞–∫–∞–∑ (Menu) —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID MenuItem –≤ –ø–æ–ª–µ is_template
    const newOrder = await db.Menu.create({
      name: `–ó–∞–∫–∞–∑ –æ—Ç ${new Date().toLocaleDateString()}`,
      comment: state.comment || null,
      is_template: menuItem.id,  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID MenuItem –∑–¥–µ—Å—å
      owner_id: user.id
    });

    if (!newOrder || !newOrder.id) {
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω, —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π MenuItem
      await menuItem.destroy();
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑");
    }
    
    // ‚úÖ 4. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update({
      currentMenuId: newOrder.id,
      currentOrder: {}, // –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      comment: null,
      step: null
    });
    
    // ‚úÖ 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ items
    const ingredientIds = items.map(item => item.id);
    
    const ingredients = await db.Ingredient.findAll({
      where: { id: ingredientIds },
      raw: true
    });
    
    let orderText = `üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${user.username ? `@${user.username}` : user.telegramId} (ID: ${newOrder.id}):\n\n`;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ items
    for (const item of items) {
      const ingredient = ingredients.find(ing => ing.id === item.id);
      if (ingredient) {
        orderText += `‚Ä¢ ${ingredient.name} ‚Äî ${item.quantity} ${ingredient.unit}\n`;
      } else {
        orderText += `‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç (ID: ${item.id}) ‚Äî ${item.quantity}\n`;
      }
    }
    
    if (state.comment) {
      orderText += `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${state.comment}`;
    }
    
    // ‚úÖ 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
    const admins = await db.User.findAll({ where: { role: 'admin' } });
    for (const admin of admins) {
      try {
        await bot.sendMessage(admin.telegramId, orderText);
      } catch (err) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É ${admin.telegramId}:`, err.message);
      }
    }
    
    // ‚úÖ 7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const keyboard = {
      reply_markup: {
        inline_keyboard: [[{ text: 'üç± –ì–ª–∞–≤–Ω–∞—è', callback_data: 'main_menu' }]]
      }
    };
    await sendOrEditMessage(bot, chatId, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", keyboard);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.");
  }
};