// controllers/botController.mjs
import db from '../models/index.mjs';
import { deleteMessage } from '../utils/botUtils.mjs';
import {showAdminPanel} from './adminController.mjs'


export const registerUser = async (bot, msg) => {
  const chatId = msg.chat.id;
  try {
    const [user, created] = await db.User.findOrCreate({
      where: { telegramId: chatId.toString() },
      defaults: {
        username: msg.from.username || '',
        firstName: msg.from.first_name,
        lastName: msg.from.last_name
      }
    });
    if (!created) {
      return bot.sendMessage(chatId, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
    }
    // ‚úÖ –°–æ–∑–¥–∞–µ–º UserState –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await db.UserState.create({
      telegramId: chatId.toString(),
      userId: user.id
    });
    bot.sendMessage(chatId, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
  }
};

// ‚úÖ –î–ª—è –∫–æ–º–∞–Ω–¥—ã /register
export const registerUserCommand = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userData = msg.from;

  if (!userData.username) {
    return bot.sendMessage(chatId, "‚ö†Ô∏è –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —é–∑–µ—Ä–Ω–µ–π–º");
  }

  try {
    const [user, created] = await db.User.findOrCreate({
      where: { username: userData.username },
      defaults: {
        telegramId: userData.id.toString(),
        firstName: userData.first_name || '',
        lastName: userData.last_name || '',
        role: 'user',
        isRegistered: true
      }
    });

    if (!created) {
      return bot.sendMessage(chatId, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
    }

    await bot.sendMessage(chatId, "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç!", {
      reply_markup: {
        inline_keyboard: [[{ text: 'üçΩ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω –º–µ–Ω—é', callback_data: 'select_template' }]]
      }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

// ‚úÖ –î–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
export const registerUserCallback = async (bot, query) => {
  const chatId = query.message.chat.id;
  const userData = query.from;

  try {
    const user = await db.User.findOne({ where: { username: userData.username } });
    if (!user) {
      await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    await user.update({ isRegistered: true });

    const messageText = `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç, @${userData.username}!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏.`;
    const keyboard = {
      reply_markup: {
        inline_keyboard: [[{ text: 'üçΩ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω –º–µ–Ω—é', callback_data: 'select_template' }]]
      }
    };

    await bot.editMessageText(messageText, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: keyboard.reply_markup
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

// controllers/botController.mjs
export const startCommand = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userData = msg.from;

  if (!userData.username) {
    await bot.sendMessage(chatId, "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram-—é–∑–µ—Ä–Ω–µ–π–º.");
    return;
  }

  try {
    const [user, created] = await db.User.findOrCreate({
      where: { username: userData.username },
      defaults: {
        telegramId: userData.id.toString(),
        firstName: userData.first_name || '',
        lastName: userData.last_name || '',
        role: 'user',
        isRegistered: false
      }
    });

    let messageText;
    let keyboard;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (user.role === 'admin') {
      await showAdminPanel(bot, chatId)
      return;
    } else if (!created && user.isRegistered) {
      messageText = `üëã –ü—Ä–∏–≤–µ—Ç, @${userData.username}!\n–ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?`;
      keyboard = {
        reply_markup: {
          inline_keyboard: [[{
            text: 'üçΩ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω',
            callback_data: 'select_template'
          }]]
        }
      };
    } else {
      messageText = `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, @${userData.username}!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.`;
      keyboard = {
        reply_markup: {
          inline_keyboard: [[{
            text: '‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç',
            callback_data: 'register_client'
          }]]
        }
      };
    }

    await bot.sendMessage(chatId, messageText, keyboard);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:", error);
    await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};
