// controllers/botController.mjs
import db from '../models/index.mjs';
import { sendOrEditMessage } from '../utils/botUtils.mjs';
import { Op } from 'sequelize';

export const startCommand = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userData = msg.from;

  try {
    const [user, created] = await db.User.findOrCreate({
      where: { telegramId: userData.id.toString() },
      defaults: {
        telegramId: userData.id.toString(),
        firstName: userData.first_name || '',
        lastName: userData.last_name || '',
        role: 'user',
        isRegistered: false
      }
    });

    if (!created && user.isRegistered) {
      return showMainMenu(bot, chatId);
    }

    const messageText = `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${('@'+userData.username||(userData.first_name+' '+userData.last_name)||"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.`;
    const keyboard = {
      inline_keyboard: [[{
        text: '‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç',
        callback_data: 'register_client'
      }]]
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendOrEditMessage –≤–º–µ—Å—Ç–æ bot.sendMessage
    await sendOrEditMessage(bot, chatId, messageText, {
      reply_markup: keyboard
    });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:", error);
    await sendOrEditMessage(bot, chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

export const registerUserCallback = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;
  const userData = query.from;

  try {
    const user = await db.User.findOne({ where: { telegramId: userData.id.toString() } });
    if (!user) {
      await sendOrEditMessage(bot, chatId, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await user.update({ isRegistered: false });

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
    if (!state) {
      state = await db.UserState.create({
        telegramId: chatId.toString(),
        userId: user.id
      });
    } else if (!state.userId) {
      await state.update({ userId: user.id });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    await state.update({ step: 'awaiting_organisation' });

    const messageText = `üè¢ –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ú–ë–î–û–£ "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ ‚Ññ123"\n–∏–ª–∏\n–ì–ë–û–£ –°–û–® ‚Ññ45`;

    await bot.answerCallbackQuery(query.id);

    await sendOrEditMessage(bot, chatId, messageText);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

export const registerUserPost = async (bot, query) => {
  const chatId = query.message.chat.id;
  const userData = query.from;

  try {
    const user = await db.User.findOne({ where: { telegramId: userData.id.toString() } });
    if (!user) {
      await sendOrEditMessage(bot, chatId, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. \n/start");
      return;
    }

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if (!user.isRegistered) {
      await user.update({ isRegistered: true });
    }

    const messageText = `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç, ${('@'+userData.username||(userData.first_name+' '+userData.last_name)||"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏.`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üõí –°–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'make_order' }],
        [{ text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'contact_info' }],
        [{ text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', callback_data: 'bot_info' }],
        [{ text: 'üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'my_orders' }]
      ]
    };

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback (–µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π query)
    if (query.id) {
      await bot.answerCallbackQuery(query.id).catch(() => {});
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendOrEditMessage(bot, chatId, messageText, {
      reply_markup: keyboard
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

export const showMainMenu = async (bot, chatId) => {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üõí –°–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'make_order' }],
      [{ text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'contact_info' }],
      [{ text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', callback_data: 'bot_info' }],
      [{ text: 'üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'my_orders' }]
    ]
  };

  await sendOrEditMessage(bot, chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤!", {
    reply_markup: keyboard
  });
};

export const showContactInfo = async (bot, chatId) => {
  const contacts = `
üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è: +7 (XXX) XXX-XX-XX
–¢–µ–ª–µ—Ñ–æ–Ω 1: +7 (XXX) XXX-XX-XX
–¢–µ–ª–µ—Ñ–æ–Ω 2: +7 (XXX) XXX-XX-XX
–¢–µ–ª–µ—Ñ–æ–Ω –ï–ò–°: +7 (XXX) XXX-XX-XX
üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: info@example.com
  `;

  const keyboard = {
    inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]]
  };

  await sendOrEditMessage(bot, chatId, contacts, {
    reply_markup: keyboard
  });
};

export const showBotInfo = async (bot, chatId) => {
  const info = `
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã.
–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:
1. –ù–∞–∂–º–∏—Ç–µ "–°–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç
4. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫—Ä–∞—Ç–Ω–æ —Ñ–∞—Å–æ–≤–∫–µ)
5.–í—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –∏–ª–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
  `;

  const keyboard = {
    inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]]
  };

  await sendOrEditMessage(bot, chatId, info, {
    reply_markup: keyboard
  });
};

export const showMyOrders = async (bot, chatId) => {
  try {
    const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
    if (!user) {
      await sendOrEditMessage(bot, chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const orders = await db.Menu.findAll({
      where: { 
        owner_id: user.id,
        is_template: { [Op.gt]: 0 }
      },
      order: [['created_at', 'DESC']],
      limit: 5,
      raw: true
    });

    if (!orders.length) {
      await sendOrEditMessage(bot, chatId, "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", {
        reply_markup: {
          inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]]
        }
      });
      return;
    }

    let message = "üì¶ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n";
    const keyboard = [];
    
    orders.forEach(order => {
      message += `${order.name}\n`;
      keyboard.push([{
        text: `–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ${order.name}`,
        callback_data: `order_details_${order.id}`
      }]);
    });

    message += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.";
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

    await sendOrEditMessage(bot, chatId, message, {
      reply_markup: { inline_keyboard: keyboard }
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏.");
  }
};

export const showOrderDetails = async (bot, chatId, orderId) => {
  try {
    const order = await db.Menu.findOne({
      where: { id: orderId },
      raw: true
    });

    if (!order) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    if (!order.is_template || order.is_template <= 0) {
      return sendOrEditMessage(bot, chatId, "üì¶ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.");
    }

    const menuItem = await db.MenuItem.findOne({
      where: { id: order.is_template },
      raw: true
    });

    if (!menuItem) {
      return sendOrEditMessage(bot, chatId, "üì¶ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã (MenuItem –Ω–µ –Ω–∞–π–¥–µ–Ω).");
    }

    const items = Array.isArray(menuItem.ingredientId) ? menuItem.ingredientId : [];
    if (items.length === 0) {
      return sendOrEditMessage(bot, chatId, "üì¶ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤ –Ω—ë–º –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.");
    }

    const ingredientIds = items.map(item => item.id);
    const ingredients = await db.Ingredient.findAll({
      where: { id: ingredientIds },
      raw: true
    });

    let message = `üì¶ –î–µ—Ç–∞–ª–∏ "${order.name}":\n\n`;
    for (const item of items) {
      const ingredient = ingredients.find(ing => ing.id === item.id);
      if (ingredient) {
        message += `${ingredient.name} ‚Äî ${item.quantity} ${ingredient.unit}\n`;
      } else {
        message += `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç (ID: ${item.id}) ‚Äî ${item.quantity}\n`;
      }
    }

    if (order.comment) {
      message += `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}`;
    }

    const keyboard = {
      inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º', callback_data: 'my_orders' }]]
    };

    await sendOrEditMessage(bot, chatId, message, {
      reply_markup: keyboard
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞.");
  }
};