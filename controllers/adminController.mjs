// controllers/adminController.mjs
import db from '../models/index.mjs';
import { deleteMessage } from '../utils/botUtils.mjs';

const ITEMS_PER_PAGE = 10;

// –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
export const showAdminPanel = async (bot, chatId) => {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', callback_data: 'admin_add_ingredient' }],
        [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', callback_data: 'admin_delete_ingredient' }],
        [{ text: 'üßæ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤', callback_data: 'admin_list_templates' }],
        [{ text: 'üïí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏', callback_data: 'admin_set_notification_time' }],
        [{ text: 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º', callback_data: 'admin_send_broadcast' }],
        [{ text: 'üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin_delete_user' }]
      ]
    }
  };

  await bot.sendMessage(chatId, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", keyboard);
};

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
export const showIngredients = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const match = query.data.match(/admin_ingredient_(prev|next)_page_(\d+)/);
  const direction = match ? match[1] : 'next';
  const currentPage = match ? parseInt(match[2], 10) : 0;

  const offset = direction === 'prev' ? Math.max(0, currentPage - 1) * ITEMS_PER_PAGE : currentPage * ITEMS_PER_PAGE;

  try {
    const result = await db.Ingredient.findAndCountAll({
      limit: ITEMS_PER_PAGE,
      offset: offset,
      raw: true
    });

    const totalPages = Math.ceil(result.count / ITEMS_PER_PAGE);

    const keyboard = result.rows.map(ingredient => [{
      text: `${ingredient.name} (${ingredient.category})`,
      callback_data: `admin_select_ingredient_${ingredient.id}`
    }]);

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const paginationRow = [];
    if (offset > 0) {
      paginationRow.push({
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: `admin_ingredient_prev_page_${Math.max(0, currentPage - 1)}`
      });
    }
    if (offset + ITEMS_PER_PAGE < result.count) {
      paginationRow.push({
        text: '–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è',
        callback_data: `admin_ingredient_next_page_${currentPage + 1}`
      });
    }

    if (paginationRow.length > 0) {
      keyboard.push(paginationRow);
    }

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back_to_menu' }]);

    const messageText = `üîç –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (${offset + 1}-${Math.min(offset + ITEMS_PER_PAGE, result.count)} –∏–∑ ${result.count}):`;

    await deleteMessage(bot, chatId, message_id);
    await bot.sendMessage(chatId, messageText, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:", err);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.");
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
export const deleteIngredient = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;

  const match = query.data.match(/admin_select_ingredient_(\d+)/);
  if (!match) {
    return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
  }

  const ingredientId = parseInt(match[1], 10);
  const ingredient = await db.Ingredient.findByPk(ingredientId);

  if (!ingredient) {
    return bot.sendMessage(chatId, "‚ùå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }

  const confirmKeyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –î–∞',
            callback_data: `admin_confirm_delete_ingredient_${ingredientId}`
          },
          {
            text: '‚ùå –ù–µ—Ç',
            callback_data: 'admin_delete_ingredient'
          }
        ]
      ]
    }
  };

  await deleteMessage(bot, chatId, message_id);
  await bot.sendMessage(chatId, `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç "${ingredient.name}"?`, confirmKeyboard);
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
export const confirmDeleteIngredient = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;

  const match = query.data.match(/admin_confirm_delete_ingredient_(\d+)/);
  const ingredientId = parseInt(match[1], 10);

  const ingredient = await db.Ingredient.findByPk(ingredientId);
  if (!ingredient) {
    return bot.sendMessage(chatId, "‚ùå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }

  await ingredient.destroy();
  await deleteMessage(bot, chatId, message_id);
  await bot.sendMessage(chatId, `‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç "${ingredient.name}" —É–¥–∞–ª—ë–Ω.`);
  await showIngredients(bot, query);
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
export const addIngredient = async (bot, msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const args = text.split(' ').slice(1);

  if (args.length < 6) {
    await bot.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_ingredient –∏–º—è –µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞—Å–æ–≤–∫–∞_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω_–∑–∞–∫–∞–∑ –º–∞–∫—Å_–∑–∞–∫–∞–∑");
    return;
  }

  const [name, unit, category, packaging_amount, min_order, max_order] = args;
  const packaging = '—à—Ç'; // –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å: –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ

  try {
    await db.Ingredient.create({
      name,
      unit,
      category,
      packaging,
      packaging_amount: parseFloat(packaging_amount),
      min_order: parseFloat(min_order),
      max_order: parseFloat(max_order)
    });

    await bot.sendMessage(chatId, `‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç "${name}" –¥–æ–±–∞–≤–ª–µ–Ω.`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.");
  }
};

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const moveIngredientToCategory = async (bot, msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const args = text.split(' ').slice(1);

  if (args.length < 2) {
    await bot.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /move_ingredient –∏–º—è_–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –Ω–æ–≤–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è");
    return;
  }

  const [name, newCategory] = args;
  try {
    const ingredient = await db.Ingredient.findOne({ where: { name } });
    if (!ingredient) {
      return bot.sendMessage(chatId, "‚ùå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    await ingredient.update({ category: newCategory });
    await bot.sendMessage(chatId, `‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç "${name}" –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${newCategory}".`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.");
  }
};

// –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
export const listTemplates = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;

  try {
    const templates = await db.Menu.findAll({ where: { isTemplate: true }, raw: true });

    if (!templates.length) {
      return bot.sendMessage(chatId, "üçΩ –®–∞–±–ª–æ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
    }

    const keyboard = templates.map(template => [{
      text: template.name || `–®–∞–±–ª–æ–Ω #${template.id}`,
      callback_data: `use_template_${template.id}`
    }]);

    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back_to_menu' }]);

    await deleteMessage(bot, chatId, message_id);
    await bot.sendMessage(chatId, "üßæ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤:", {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —à–∞–±–ª–æ–Ω–æ–≤:", err);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤.");
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
export const setNotificationTime = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '09:00', callback_data: 'admin_set_time_09:00' }],
        [{ text: '10:00', callback_data: 'admin_set_time_10:00' }],
        [{ text: '11:00', callback_data: 'admin_set_time_11:00' }],
        [{ text: '12:00', callback_data: 'admin_set_time_12:00' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back_to_menu' }]
      ]
    }
  };

  await deleteMessage(bot, chatId, message_id);
  await bot.sendMessage(chatId, "üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", keyboard);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
export const handleSetTime = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;
  const match = query.data.match(/admin_set_time_(\d{2}:\d{2})/);

  if (!match) {
    return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è", true);
  }

  const selectedTime = match[1];

  try {
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
    if (!state) {
      return bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    await state.update({ notificationTime: selectedTime });

    await deleteMessage(bot, chatId, message_id);
    await bot.sendMessage(chatId, `‚úÖ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${selectedTime}`);
    await showAdminPanel(bot, chatId);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è.");
  }
};

// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
export const broadcastMessage = async (bot, query) => {
  const chatId = query.message.chat.id;
  const message_id = query.message.message_id;

  try {
    const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
    await state.update({ step: 'broadcast' });

    await deleteMessage(bot, chatId, message_id);
    await bot.sendMessage(chatId, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:");

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.");
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const deleteUser = async (bot, msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const username = text.split(' ')[1];

  if (!username) {
    return bot.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_user username");
  }

  try {
    const user = await db.User.findOne({ where: { username } });
    if (!user) {
      return bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    await user.destroy();
    await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —É–¥–∞–ª—ë–Ω.`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
};