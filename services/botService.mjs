// services/botService.mjs
import db from '../models/index.mjs';
import { getMenuForToday } from './databaseService.mjs'; 
import { sendDailyMenuToUser } from './menuService.mjs';

export const sendDailyMenu = async (bot) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const menu = await getMenuForToday(); 

    if (!menu || !menu.items.length) {
      console.log("‚ùå –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await db.User.findAll({
      where: { isRegistered: true },
      raw: true
    });

    for (const user of users) {
      const message = `üìÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∫–µ—Ç—É\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ ${new Date().toLocaleDateString()}:\n\n` +
        menu.items.map(item => 
          `${item.ingredientName} ‚Äî ${item.requiredAmount}${item.ingredientUnit}`
        ).join('\n');

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'confirm_daily_menu' }],
            [{ text: 'üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: 'edit_ingredients' }]
          ]
        }
      };

      await bot.sendMessage(user.telegramId, message, keyboard);
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –º–µ–Ω—é:", error.message);
  }
};

export const handleSetTime = async (bot, query) => {
  const chatId = query.message.chat.id;
  const match = query.data.match(/admin_set_time_(\d{2}:\d{2})/);

  if (!match) {
    return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –í—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ", true);
  }

  const selectedTime = match[1];

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º—è –≤ UserState
    await db.UserState.update(
      { notificationTime: selectedTime },
      { where: {} } // –í—Å–µ –∑–∞–ø–∏—Å–∏
    );

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    scheduleCustomDailyMenu(bot, selectedTime);

    await bot.sendMessage(chatId, `‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${selectedTime}`);
    await bot.answerCallbackQuery(query.id, `–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${selectedTime}`, true);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:", err);
    await bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏.");
  }
};

export const scheduleCustomDailyMenu = (bot, time = '09:00') => {
  const [hour, minute] = time.split(':').map(Number);

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
  if (global.dailyMenuJob) {
    global.dailyMenuJob.cancel();
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  global.dailyMenuJob = scheduleJob(`0 ${minute} ${hour} * * *`, async () => {
    console.log(`üì© –†–∞—Å—Å—ã–ª–∫–∞ –º–µ–Ω—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${hour}:${minute}`);

    const users = await db.UserState.findAll({ raw: true });

    for (const state of users) {
      try {
        await sendDailyMenuToUser(bot, state.telegramId);
      } catch (err) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${state.telegramId}:`, err.message);
      }
    }
  });
};