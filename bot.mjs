// bot.mjs
import dotenv from 'dotenv';
import TelegramBot from 'node-telegram-bot-api';
import { scheduleJob } from 'node-schedule';
import { sendDailyMenu } from './services/botService.mjs';
import db from './models/index.mjs';
import * as botController from './controllers/botController.mjs';
import * as menuController from './controllers/menuController.mjs';
import * as adminController from './controllers/adminController.mjs';
import * as userController from './controllers/userController.mjs';
import { deleteMessage } from './utils/botUtils.mjs';

dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ë–î
await db.sequelize.sync({ force: false });
console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

// –ö–æ–º–∞–Ω–¥—ã
bot.onText(/\/start/, (msg) => botController.startCommand(bot, msg));

bot.onText(/\/move_ingredient/, async (msg) => {
  const chatId = msg.chat.id;
  await exports.moveIngredientToCategory(bot, { message: msg });
});
bot.onText(/\/register/, (msg) => botController.registerUser(bot, msg));
bot.onText(/\/register_admin/, (msg) => botController.registerAdmin(bot, msg));
bot.onText(/\/add_admin (\d+)/, (msg, match) => botController.addAdmin(bot, msg, match));

bot.onText(/\/add_ingredient/, (msg) => adminController.addIngredient(bot, msg));
bot.onText(/\/delete_ingredient/, (msg) => adminController.deleteIngredient(bot, msg));
bot.onText(/\/move_ingredient/, (msg) => adminController.moveIngredientToCategory(bot, msg));
bot.onText(/\/delete_user/, (msg) => adminController.deleteUser(bot, msg));

bot.onText(/\/create_menu/, (msg) => userController.createMenuCommand(bot, msg));
bot.onText(/\/addmenu/, (msg) => menuController.addMenuCommand(bot, msg));

bot.onText(/\/add_template_menu (.+)/, (msg) => userController.createTemplateMenu(bot, msg));

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
  if (!user || !user.isRegistered) return;

  const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
  if (!state) return;

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  if (state.editingIngredientId && state.currentMenuId && !text.startsWith('/')) {
    await userController.handleIngredientQuantityInput(bot, msg);
  }
});

// bot.mjs
const processedMessages = new Set();
let Enable = false;

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const messageId = msg.message_id;

  const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
  if (!user || !user.isRegistered) return;

  const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
  if (!state) return;

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const messageKey = `${chatId}:${messageId}:${text}`;
  if (processedMessages.has(messageKey)) return;
  processedMessages.add(messageKey);

  // –†–∞—Å—Å—ã–ª–∫–∞
  // if (user.role === 'admin' && state.step === 'broadcast') {
  if (user.role === 'admin' &&Enable) {
    await state.update({ step: null });

    const users = await db.User.findAll({ where: { isRegistered: true }, raw: true });

    for (const user of users) {
      try {
        await bot.sendMessage(user.telegramId, `üì¢ –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª:\n\n${text}`);
      } catch (err) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, err.message);
      }
    }

    await bot.sendMessage(chatId, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  if (state.editingIngredientId && state.currentMenuId && !text.startsWith('/')) {
    await userController.handleIngredientQuantityInput(bot, msg);
  }
  Enable=false;
});

// bot.mjs ‚Üí message handler
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
  if (!user || !user.isRegistered) return;

  const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
  if (!state) return;

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  if (state.step === 'entering_comment') {
    await state.update({
      comment: text,
      step: null
    });
    const keyboard = [
      [
        { text: 'üë©‚Äçüç≥–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'submit_order' },
        { text: '‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –µ—â—ë', callback_data: `main_menu'}` }
      ]
    ]

    await bot.sendMessage(chatId, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", {
       reply_markup: {
        inline_keyboard: keyboard
      }
    });
    return;
  }

  // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
  if (user.role === 'admin' && state.step === 'broadcast') {
    await state.update({ step: null });

    const users = await db.User.findAll({ where: { isRegistered: true }, raw: true });

    for (const user of users) {
      try {
        await bot.sendMessage(user.telegramId, `üì¢ –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª:\n\n${text}`);
      } catch (err) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, err.message);
      }
    }

    await bot.sendMessage(chatId, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
    return;
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  if (state.editingIngredientId && state.currentMenuId && !text.startsWith('/')) {
    await userController.handleIngredientQuantityInput(bot, msg);
  }
});

// bot.mjs ‚Üí callback_query
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  try {
    const requester = await db.User.findOne({ where: { telegramId: chatId.toString() } });
    
    if (data.startsWith('category_')) {
      const category = data.replace('category_', '');
      await userController.showIngredientsInCategory(bot, chatId, category);
      return;
    }

    if(data === 'register_client'){
      botController.registerUserCallback(bot, query)
      return;
    }
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!requester || !requester.isRegistered) {
      return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", true);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if (data === 'main_menu') {
      await botController.showMainMenu(bot, chatId);
      return;
    }
     // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
    if (data === 'my_orders') {
      await botController.showMyOrders(bot, chatId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    if (data.startsWith('order_details_')) {
      const orderId = data.replace('order_details_', '');
      await botController.showOrderDetails(bot, chatId, orderId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É"
    if (data === 'make_order') {
      await userController.showCategoriesMenu(bot, chatId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (data.startsWith('category_')) {
      const category = data.replace('category_', '');
      await userController.showIngredientsInCategory(bot, chatId, category);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    if (data.startsWith('ingredient_')) {
      const ingredientId = data.replace('ingredient_', '');
      await userController.showIngredientQuantityOptions(bot, chatId, ingredientId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (data.startsWith('quantity_')) {
      const [_, ingredientId, amount] = data.split('_');
      await userController.handleQuantitySelection(bot, chatId, ingredientId, amount);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
    if (data === 'submit_order') {
      await userController.submitOrder(bot, chatId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    if (data === 'enter_comment') {
      await userController.enterCommentMode(bot, chatId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (requester.role === 'admin') {
      switch (data) {
        case 'admin_add_ingredient':
          await bot.sendMessage(chatId, "‚ûï –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/add_ingredient –∏–º—è –µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞—Å–æ–≤–∫–∞_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω_–∑–∞–∫–∞–∑ –º–∞–∫—Å_–∑–∞–∫–∞–∑");
          break;
        
        case 'admin_list_templates':
          await adminController.listTemplates(bot, query);
          break;
          
        case 'admin_set_notification_time':
          await adminController.setNotificationTime(bot, query);
          break;
          
        case 'admin_send_broadcast':
          await adminController.broadcastMessage(bot, query);
          break;
          
        default:
          if (data.startsWith('admin_select_ingredient_')) {
            await adminController.deleteIngredient(bot, query);
          } else if (data.startsWith('admin_ingredient_prev_page_') || data.startsWith('admin_ingredient_next_page_')) {
            await adminController.showIngredients(bot, query);
          }
          break;
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    switch (data) {
      case 'contact_info':
        await botController.showContactInfo(bot, chatId);
        break;
        
      case 'bot_info':
        await botController.showBotInfo(bot, chatId);
        break;
        
      case 'my_orders':
        await botController.showMyOrders(bot, chatId);
        break;
        
      default:
        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${data}`);
        await bot.answerCallbackQuery(query.id, "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", true);
        break;
    }

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ callback_query:", err);
    await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

scheduleJob('0 9 * * *', async () => {
  await sendDailyMenu(bot);
});

export default bot;