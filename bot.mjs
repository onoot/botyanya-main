// bot.mjs
import dotenv from 'dotenv';
import TelegramBot from 'node-telegram-bot-api';
import { scheduleJob } from 'node-schedule';
import { sendDailyMenu } from './services/botService.mjs';
import db from './models/index.mjs';
import * as botController from './controllers/botController.mjs';
import * as menuController from './controllers/menuController.mjs';
import * as adminController from './controllers/adminController.mjs';
import * as userController from './controllers/userController.mjs';
import {sendOrEditMessage} from './utils/botUtils.mjs'

dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ë–î
if (false) {
  await db.sequelize.sync({ force: false });
  console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}


// –ö–æ–º–∞–Ω–¥—ã
bot.onText(/\/start/, (msg) => botController.startCommand(bot, msg));

bot.onText(/\/move_ingredient/, async (msg) => {
  const chatId = msg.chat.id;
  await exports.moveIngredientToCategory(bot, { message: msg });
});
bot.onText(/\/register/, (msg) => botController.registerUser(bot, msg));
bot.onText(/\/register_admin/, (msg) => botController.registerAdmin(bot, msg));
bot.onText(/\/add_admin (\d+)/, (msg, match) => botController.addAdmin(bot, msg, match));

bot.onText(/\/add_ingredient/, (msg) => adminController.addIngredient(bot, msg));
bot.onText(/\/delete_ingredient/, (msg) => adminController.deleteIngredient(bot, msg));
bot.onText(/\/move_ingredient/, (msg) => adminController.moveIngredientToCategory(bot, msg));
bot.onText(/\/delete_user/, (msg) => adminController.deleteUser(bot, msg));

bot.onText(/\/create_menu/, (msg) => userController.createMenuCommand(bot, msg));
bot.onText(/\/addmenu/, (msg) => menuController.addMenuCommand(bot, msg));

bot.onText(/\/add_template_menu (.+)/, (msg) => userController.createTemplateMenu(bot, msg));

// bot.mjs ‚Üí –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö onText
bot.onText(/\/admin/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
    
    if (!user) {
      return sendOrEditMessage(bot, chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    if (user.role !== 'admin') {
      return sendOrEditMessage(bot, chatId, "üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
    }

    const adminCommands = `
üõ† <b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã</b>:

/add_ingredient <i>–∏–º—è –µ–¥.–∏–∑–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞—Å–æ–≤–∫–∞ –º–∏–Ω_–∑–∞–∫–∞–∑ –º–∞–∫—Å_–∑–∞–∫–∞–∑</i>
‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç

/delete_ingredient
‚Äî –£–¥–∞–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç (—á–µ—Ä–µ–∑ –º–µ–Ω—é)

/move_ingredient <i>–∏–º—è_–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –Ω–æ–≤–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è</i>
‚Äî –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

/delete_user <i>username</i>
‚Äî –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

/export_orders
‚Äî –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ Excel

/set_notification_time
‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏

/send_broadcast
‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üõ† –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_open_panel' }
        ]]
      }
    };

    await sendOrEditMessage(bot, chatId, adminCommands, {
      parse_mode: 'HTML',
      ...keyboard
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥.");
  }
});
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
  if (!user || !user.isRegistered) return;

  const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
  if (!state) return;

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  if (state.editingIngredientId && state.currentMenuId && !text.startsWith('/')) {
    await userController.handleIngredientQuantityInput(bot, msg);
  }
});

// bot.mjs
const processedMessages = new Set();
let Enable = false;

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const messageId = msg.message_id;

  const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
  if (!user || !user.isRegistered) return;

  const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
  if (!state) return;

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const messageKey = `${chatId}:${messageId}:${text}`;
  if (processedMessages.has(messageKey)) return;
  processedMessages.add(messageKey);

  // –†–∞—Å—Å—ã–ª–∫–∞
  // if (user.role === 'admin' && state.step === 'broadcast') {
  if (user.role === 'admin' &&Enable) {
    await state.update({ step: null });

    const users = await db.User.findAll({ where: { isRegistered: true }, raw: true });

    for (const user of users) {
      try {
        await bot.sendMessage(user.telegramId, `üì¢ –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª:\n\n${text}`);
      } catch (err) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, err.message);
      }
    }

    await bot.sendMessage(chatId, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  if (state.editingIngredientId && state.currentMenuId && !text.startsWith('/')) {
    await userController.handleIngredientQuantityInput(bot, msg);
  }
  Enable=false;
});

// bot.mjs ‚Üí message handler
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  const user = await db.User.findOne({ where: { telegramId: chatId.toString() } });
  if (!user) return;

  const state = await db.UserState.findOne({ where: { telegramId: chatId.toString() } });
  if (!state) return;

  // ‚úÖ 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  if (state.step === 'awaiting_organisation') {
     if (user.role === 'admin') {
      await state.update({ step: null });
      await bot.sendMessage(bot, chatId, "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.");
      return;
    }
    // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π regex
    const orgRegex = /^(–ú–ë–î–û–£|–ú–ö–î–û–£|–ú–û–£|–ì–ë–û–£|–ì–ë–î–û–£|–î–û–£|–î–µ—Ç—Å–∫–∏–π —Å–∞–¥|–®–∫–æ–ª–∞|–õ–∏—Ü–µ–π|–ì–∏–º–Ω–∞–∑–∏—è|–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ)\s*["¬´]?[–ê-–Ø–∞-—è–Å—ë\s\d‚Ññ\-]+["¬ª]?$/;

    if (!orgRegex.test(text)) {
      await sendOrEditMessage(bot, chatId, `‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ú–ë–î–û–£ "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ ‚Ññ123"\n–∏–ª–∏\n–ì–ë–û–£ –°–û–® ‚Ññ45`);
      return;
    }

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    await user.update({ organisation: text });
    await state.update({ step: null });

    // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const fakeQuery = {
      id: 'fake_id',
      from: msg.from,
      message: { chat: { id: chatId }, message_id: msg.message_id }
    };

    await botController.registerUserPost(bot, fakeQuery);
    return;
  }
  if (!user || !user.isRegistered) return;

  const keyb = [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }]]
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  if (state.step === 'entering_comment') {
    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.update({
      comment: text,
      step: null
    });

    const keyboard = [
      [
        { text: 'üë©‚Äçüç≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'submit_order' },
      ],  
      [
        { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', callback_data: 'make_order' },
      ],
      [
        { text: 'üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'delete_comment' },
      ],
      [
        { text: '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'edit_comment' },
      ],
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
      ]
    ];

    await sendOrEditMessage(bot, chatId, `‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"`, {
      reply_markup: { inline_keyboard: keyboard }
    });
    return;
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  if (state.step === 'editing_comment') {
    await state.update({
      comment: text,
      step: null
    });

    await sendOrEditMessage(bot, chatId, `‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω!\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: "${text}"`, {
      reply_markup: { inline_keyboard: keyb }
    });
    return;
  }
  // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
  if (user.role === 'admin' && state.step === 'manager') {
    await state.update({ step: null });

    const users = await db.User.findAll({ where: { isRegistered: true }, raw: true });

    for (const user of users) {
      try {
        await sendOrEditMessage(bot, user.telegramId, `üì¢ –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª:\n\n${text}`);
      } catch (err) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, err.message);
      }
    }

    await sendOrEditMessage(bot, chatId, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
    return;
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  if (state.editingIngredientId && state.currentMenuId && !text.startsWith('/')) {
    await userController.handleIngredientQuantityInput(bot, msg);
  }
});

// bot.mjs ‚Üí callback_query
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  try {
    const requester = await db.User.findOne({ where: { telegramId: chatId.toString() } });
    
    if (data.startsWith('category_')) {
      const category = data.replace('category_', '');
      await userController.showIngredientsInCategory(bot, chatId, category);
      return;
    }

    if(data === 'register_client'){
      botController.registerUserCallback(bot, query)
      return;
    }
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!requester || !requester.isRegistered) {
      return bot.answerCallbackQuery(query.id, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", true);
    }

    if (data === 'edit_comment') {
      await userController.editCommentMode(bot, chatId);
      return;
    }

    if (data === 'delete_comment') {
      await userController.deleteComment(bot, chatId);
      return;
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if (data === 'main_menu') {
      await botController.showMainMenu(bot, chatId);
      return;
    }
     // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
    if (data === 'my_orders') {
      await botController.showMyOrders(bot, chatId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    if (data.startsWith('order_details_')) {
      const orderId = data.replace('order_details_', '');
      await botController.showOrderDetails(bot, chatId, orderId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É"
    if (data === 'make_order') {
      await userController.showCategoriesMenu(bot, chatId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (data.startsWith('category_')) {
      const category = data.replace('category_', '');
      await userController.showIngredientsInCategory(bot, chatId, category);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    if (data.startsWith('ingredient_')) {
      const ingredientId = data.replace('ingredient_', '');
      await userController.showIngredientQuantityOptions(bot, chatId, ingredientId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (data.startsWith('quantity_')) {
      const [_, ingredientId, amount] = data.split('_');
      await userController.handleQuantitySelection(bot, chatId, ingredientId, amount);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
    if (data === 'submit_order') {
      await userController.submitOrder(bot, chatId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    if (data === 'enter_comment') {
      await userController.enterCommentMode(bot, chatId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (requester.role === 'admin') {
        switch (data) {
          case 'admin_open_panel':
            await adminController.showAdminPanel(bot, chatId);
            return;
          case 'admin_export_orders':
            await adminController.exportOrdersByCategory(bot, chatId);
            return;

          case 'admin_list_templates':
            await adminController.listTemplates(bot, query);
            return;

          case 'admin_set_notification_time':
            await adminController.setNotificationTime(bot, query);
            return;

          case 'admin_send_broadcast':
            await adminController.broadcastMessage(bot, query);
            return;

          default:
            if (data.startsWith('exp_cat_')) {
              await adminController.handleExportCategory(bot, query);
              return;
            }
            if (data.startsWith('admin_select_ingredient_')) {
              await adminController.deleteIngredient(bot, query);
              return;
            }
            if (data.startsWith('admin_ingredient_prev_page_') || data.startsWith('admin_ingredient_next_page_')) {
              await adminController.showIngredients(bot, query);
              return;
            }
            break;
        }
        return;
      }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    switch (data) {
      case 'contact_info':
        await botController.showContactInfo(bot, chatId);
        break;
        
      case 'bot_info':
        await botController.showBotInfo(bot, chatId);
        break;
        
      case 'my_orders':
        await botController.showMyOrders(bot, chatId);
        break;
        
      default:
        console.warn(`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è –æ—à–∏–±–∫–∞: ${data}`);
        await bot.answerCallbackQuery(query.id, "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è –æ—à–∏–±–∫–∞", true);
        break;
    }

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ callback_query:", err);
    await sendOrEditMessage(bot, chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

scheduleJob('0 9 * * *', async () => {
  await sendDailyMenu(bot);
});

export default bot;